---
jupyter:
  kernelspec:
    display_name: base
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.12.7
  nbformat: 4
  nbformat_minor: 5
---

::: {#c9b7e793 .cell .markdown}
## **1 Setup and run instructions** {#1-setup-and-run-instructions}
:::

::: {#989ceac7 .cell .markdown}
### 1.1 dependency and command-line usage {#11-dependency-and-command-line-usage}
:::

::: {#1a998468 .cell .code}
``` python
# Activate Python environmenr and install dependencies
cd /mnt/c/Users/thoma/Projects
source /mnt/c/Users/thoma/Projects/venv/bin/activate
pip install -r requirements.txt # This is generated by myself. hydra, loguru 

# Terasim
git clone https://github.com/mcity/TeraSim
cd TeraSim
pip install -e .
cd ..

# Install Poetry
curl -sSL https://install.python-poetry.org | python3 -

# TeraSim-NDE-NADE
git clone https://github.com/mcity/TeraSim-NDE-NADE
cd TeraSim-NDE-ITE
# Switch to intern_interview_task branch
git checkout intern_interview_task

# Running example simulation
cd example
python safetest_mcity_main.py
```
:::

::: {#583d6d42 .cell .markdown}
## **2 Code-base walk-through & adversity mechanism** {#2-code-base-walk-through--adversity-mechanism}
:::

::: {#fa1154e5 .cell .markdown}
##### 2.1 Utils Overview {#21-utils-overview}

  --------------------------------------------------------------------------------------------------
  Path (from `TeraSim-NDE-NADE/`)           Purpose                       Relation to *adversity*
  ----------------------------------------- ----------------------------- --------------------------
  **`terasim_nde_nade/utils/adversity/`**   Core package                  All base classes,
                                                                          builders, managers &
                                                                          helpers

  ├─ `abstract_adversity.py`                `AbstractAdversity`,          Dynamic / static risk base
                                            `AbstractStaticAdversity`     classes

  ├─ `adversity_builder.py`                 `build_adversities()`         Instantiates classes
                                                                          listed in **Hydra** YAML

  ├─ `adversity_manager.py`                 `AdversityManager`,           Calls `derive_command()`
                                            `StaticAdversityManager`      every timestep

  ├─ `"other_helper".py`                    e.g.                          Provide shared utilities
                                            `traffic_rule_adversity.py`   for adversity scenarios,
                                                                          including trajectory,
                                                                          geometry calculations and
                                                                          traffic‑rule checks.
  --------------------------------------------------------------------------------------------------
:::

::: {#8498a254 .cell .markdown}
##### 2.2 Adversities Overview {#22-adversities-overview}

  ------------------------------------------------------------------------------------------------
  Path (from `TeraSim-NDE-NADE/`)              Purpose                      Relation to
                                                                            *adversity*
  -------------------------------------------- ---------------------------- ----------------------
  **`terasim_nde_nade/adversity/static/`**     Contains static adversity    Defines static hazards
                                               classes and helpers          (e.g., construction)

  **`terasim_nde_nade/adversity/vehicles/`**   Implements vehicle‑based     Simulates dynamic
                                               adversity scenarios          vehicle risks (e.g.,
                                                                            lane change, merge)

  **`terasim_nde_nade/adversity/vru/`**        Implements VRU (Vulnerable   Models pedestrian
                                               Road User) adversity         risky actions (e.g.,
                                               scenarios                    jaywalking)
  ------------------------------------------------------------------------------------------------
:::

::: {#8af34f29 .cell .markdown}
##### 2.3 Bicycle Modeling and Risk Scenarios {#23-bicycle-modeling-and-risk-scenarios}

  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Path (from                                                       Purpose                                                                         Relation to *adversity*
  `TeraSim-NDE-NADE/example/maps/Mcity_safetest_complete_carla`)                                                                                   
  ---------------------------------------------------------------- ------------------------------------------------------------------------------- ----------------------------
  **`mcity.rou.xml`**                                              Defines                                                                         Treats bicycles as vehicle
                                                                   `<vType id="bike" vClass="bicycle" latAlignment="right" lcStrategic="0.5"/>`,   agents, so they can be
                                                                   bike `<route>` entries and `<flow>`                                             applied to the same dynamic
                                                                                                                                                   adversities as cars (e.g.,
                                                                                                                                                   emergency braking, sudden
                                                                                                                                                   lane changes)

  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::

::: {#f46e19c1 .cell .markdown}
##### 2.4 GUI Visual Markers Determination {#24-gui-visual-markers-determination}

  ----------------------------------------------------------------------------------------
  Path (from                                Color         Vehicle role
  `terasim_nde_nade/utils/nade/tools.py`)                 
  ----------------------------------------- ------------- --------------------------------
  avoidable_maneuver_challenge_hook         Pink          Victim that can still avoid a
                                                          collision

  unavoidable_maneuver_challenge_hook       Grey          Victim that cannot avoid a
                                                          collision

  adversarial_hook                          Red           Adversarial vehicle causing the
                                                          challenge
  ----------------------------------------------------------------------------------------
:::

::: {#c9b959f3 .cell .markdown}
## **3 Custom adversity logic** - wrong-way riding {#3-custom-adversity-logic---wrong-way-riding}
:::

::: {#ffd7f0ea .cell .markdown}
### Path: `terasim_nde_nade/utils/adversity/wrongway_adversity.py` {#path-terasim_nde_nadeutilsadversitywrongway_adversitypy}
:::

::: {#b8f2043c .cell .code}
``` python
from terasim.overlay import traci


def hijack_vehicle(vid: str) -> None:
    """Let vehicles controlled by TraCI """
    traci.vehicle.setSpeedMode(vid, 0)        
    traci.vehicle.setLaneChangeMode(vid, 0)  

def pick_first_bike_on_lane(lane_id: str) -> str | None:
    for vid in traci.lane.getLastStepVehicleIDs(lane_id):
        if "bike" in traci.vehicle.getTypeID(vid).lower():
            return vid
    return None
```
:::

::: {#cadf097e .cell .markdown}
### Path: `terasim_nde_nade/utils/adversity/wrongway_adversity.py` {#path-terasim_nde_nadeutilsadversitywrongway_adversitypy}
:::

::: {#48244eb9 .cell .code}
``` python
from __future__ import annotations
import math
from loguru import logger
from terasim.overlay import traci
from ...utils import (
    AbstractStaticAdversity,
    hijack_vehicle,
    pick_first_bike_on_lane,
)

class StaticBikeWrongwayAdversity(AbstractStaticAdversity):
    """Force the first bicycle on a given lane to ride backward for
    a fixed time window."""


    def is_effective(self) -> bool:
        return True

    def initialize(self, time: float) -> None:
        pass

    def update(self, time: float) -> None:
        # Make bike stop (if any) and exit early
        if time < self._start_time or time >= self._end_time:
            if hasattr(self, "vid"):
                traci.vehicle.setSpeed(self.vid, 0)   
                logger.info(f"[RWB] stop {self.vid} @ {time:.1f}s")
                del self.vid                      
            return

        # Pick a bike and turn it around
        if not hasattr(self, "vid"):
            lane_id = self._lane_id
            vid = pick_first_bike_on_lane(lane_id)    # helper util
            logger.debug(f"[RWB] bikes on {lane_id}: {vid}")
            if vid is None:                           
                return

            # Cache frequently used values
            self.vid   = vid
            self.dt    = traci.simulation.getDeltaT() 
            self.speed = abs(self._other_settings.get("speed", 2.0))

            # Take over the bike so SUMO no longer controls it
            hijack_vehicle(self.vid)

            # Turn the bike 180° in place
            x0, y0 = traci.vehicle.getPosition(self.vid)
            self.angle_back = (traci.vehicle.getAngle(self.vid) + 180) % 360
            traci.vehicle.moveToXY(
                self.vid, "", 0, x0, y0,
                angle=self.angle_back, keepRoute=2,
            )
            self.step = 0
            logger.info(f"[RWB] catch {self.vid} on {lane_id}, turn-back OK")


        self.step += 1
        dx =  self.speed * self.dt * math.sin(math.radians(self.angle_back))
        dy =  self.speed * self.dt * math.cos(math.radians(self.angle_back))

        x, y   = traci.vehicle.getPosition(self.vid)
        x_n, y_n = x + dx, y + dy                     # new coords

        traci.vehicle.moveToXY(
            self.vid, "", 0, x_n, y_n,
            angle=self.angle_back, keepRoute=2,
        )
        logger.debug(
            f"[RWB] {self.vid} ({x_n:.1f},{y_n:.1f}) v={-self.speed:.1f} @ {time:.1f}s"
        )
```
:::

::: {#7b7b459a .cell .markdown}
## **4 Final Report** {#4-final-report}

### 1. Overview of Adversity Generation {#1-overview-of-adversity-generation}

-   **`TeraSim:`**
    -   TeraSim runs on top of SUMO and TraCI.\
    -   You can use TraCI to let external program to control SUMO at
        runtime
-   **`TeraSim‑NDE‑NADE:`**
    -   It's a TeraSim add‑on for safety testing.
    -   `How it runs:`
        -   Builder (build_adversities()) reads the config file and
            makes each hazard.
        -   Manager runs every hazard each time step and gathers their
            commands.
        -   SUMO gets those commands to add or control cars, bikes, or
            people.
        -   GUI draws grey, red, or pink circles for each hazard and
            logs what happened.

### 2. Key Modules and Logic Paths {#2-key-modules-and-logic-paths}

-   **`utils/adversity/abstract_adversity.py`**\
    Defines the base `AbstractAdversity` and `AbstractStaticAdversity`
    interfaces with `initialize()`, `update()`, and `derive_command()`
    methods.\
-   **`utils/adversity/adversity_builder.py`**\
    Reads the Hydra config and instantiates each adversity class.\
-   **`utils/adversity/adversity_manager.py`**\
    Calls each adversity's update method every simulation time step and
    send the resulting commands.\
-   **`adversity/vehicles/…` and `adversity/vru/…`**\
    Implement concrete classes for cut‑ins, sudden lane changes,
    jaywalking, wrong‑way bikes, etc. They use spawn and trajectory
    helpers to generate vehicle or pedestrian actions.\
-   **`mcity.rou.xml`**\
    Declares `vType id="bike" vClass="bicycle"`, bike routes, and flows
    so that bicycles are treated as vehicles and can receive the same
    adversarial commands.

### 3. New Scenario Design (Wrong Way Bike) {#3-new-scenario-design-wrong-way-bike}

-   **Goal:** Force a bike to reverse direction on its lane for a set
    time.\
-   **Logic:**
    -   1.Wait until the scenario's start time.
    -   2.On the first update, look for any bike on the target lane.
    -   3.Disabling the bike\'s normal controls.
    -   4.Turn it 180° in place so it faces backward.
    -   5.Move the bike backward a small step at each time step
    -   6.Once the end time is reached, stop the bike and release
        control.
-   **Implementation:** Subclass `AbstractStaticAdversity`, use
    `should_bike_wrongway` and `derive_bike_wrongway_command` to pick a
    bike and issue wrong‑way commands.\
-   **Result:** In SUMO‑GUI, the bike turns 180° and moves backward
    along the given edge, but an error appears as soon as it leaves that
    edge.

### 4. Challenges and Potential Improvements {#4-challenges-and-potential-improvements}

-   **Challenges**
    -   I cloned the wrong TeraSim repo. Installing dependencies failed
        and gave errors.
    -   I spent a lot of time learning the code structure, such that
        Static, vehicle, and VRU adversities each use different control
        methods
    -   I first thought bikes were VRUs, but they are defined as
        vehicles. My code broke until I fixed that.
-   **Bugs and erros in Wrong way bike scenario(Optional task)**
    -   In the wrong‑way bike scenario, moving the bike into the next
        lane was hard.
    -   Some bikes start with a tilted angle. After turning 180°, they
        stayed tilted and could not move straight.
-   **Improvements**
    -   Create a shared helper function that builds a path from any
        start point, heading, and distance. This way, you don't have to
        write separate code for each maneuver (wrong‑way, diagonal
        crossing, U‑turn). The function would return a list of waypoints
        or a TraCI route command, which all adversities can reuse.
:::
